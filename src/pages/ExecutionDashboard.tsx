import { useEffect, useMemo, useState } from "react";
import { motion } from 'framer-motion';
import { checkHealth } from "../services/health.service";
import { 
  Activity, 
  Shield, 
  Target, 
  TrendingUp, 
  Play, 
  Square, 
  RotateCcw, 
  AlertTriangle,
  CheckCircle,
  Clock,
  Zap,
  Server,
  Cpu,
  HardDrive,
  Wifi,
  Terminal,
  Eye,
  Settings,
  BarChart3,
  PieChart,
  TrendingDown,
  Users,
  Globe,
  Database,
  Monitor,
  Layers
} from 'lucide-react';
import CommandRibbon from "../components/CommandRibbon";
import KPIBoard from "../components/KPIBoard";
import LogsPanel from "../components/LogsPanel";
import StatusBadge from "../components/StatusBadge";
import { adaptersStore } from "../store/adapters.store";
import { observer } from "mobx-react-lite";
import { ModeSwitch } from "../components/ModeSwitch";

type Health = "healthy" | "warning" | "error";

interface SystemMetric {
  name: string;
  value: string | number;
  trend: 'up' | 'down' | 'stable';
  status: 'healthy' | 'warning' | 'error';
  icon: any;
  change: string;
}

interface MCPAdapter {
  name: string;
  status: Health;
  latency: string;
  requests: number;
  errors: number;
  description: string;
}

export default observer(function ExecutionDashboard() {
  // ‚îÄ‚îÄ ÏÉÅÌÉú
  const [kpi, setKpi] = useState<{ name: string; value: string | number }[]>([]);
  const [logs, setLogs] = useState<string[]>([]);
  const [server, setServer] = useState<Health>("warning");
  const [version] = useState("v1.0.0");
  const [isSystemRunning, setIsSystemRunning] = useState(true);

  const [systemStats, setSystemStats] = useState({
    cpu: "23%",
    memory: "67%",
    disk: "45%",
    network: "125 MB/s",
    uptime: "2h 34m",
    processes: 42
  });

  const [adapters, setAdapters] = useState<MCPAdapter[]>([
    { 
      name: "ollama", 
      status: 'healthy', 
      latency: '45ms', 
      requests: 1247, 
      errors: 0,
      description: "Local LLM inference server"
    },
    { 
      name: "deepseek", 
      status: 'warning', 
      latency: '120ms', 
      requests: 892, 
      errors: 3,
      description: "DeepSeek API integration"
    },
    { 
      name: "local_llm", 
      status: 'error', 
      latency: 'timeout', 
      requests: 0, 
      errors: 15,
      description: "Local model processing"
    }
  ]);

  // ‚îÄ‚îÄ KPI Î™®ÏùòÍ∞í (ÌõÑÏÜç: useKPI ÌõÖ/Ïã§APIÎ°ú ÍµêÏ≤¥)
  useEffect(() => {
    setKpi([
      { name: "ROI", value: "2.31" },
      { name: "CTR", value: "9.2%" },
      { name: "ÌÉêÏßÄÏú®", value: "0.08%" },
      { name: "ÏÉùÏ°¥ÏÑ±", value: "0.998" },
      { name: "ÏúÑÏû• Ï†êÏàò", value: "97%" },
    ]);
  }, []);

  // ‚îÄ‚îÄ MCP Ìó¨Ïä§Ï≤¥ÌÅ¨
  useEffect(() => {
    const poll = async () => {
      const status = await checkHealth();
      setServer(status);
    };
    poll();
    const t = setInterval(poll, 5000);
    return () => clearInterval(t);
  }, []);

  // ‚îÄ‚îÄ WebSocket Î°úÍ∑∏ Ïä§Ìä∏Î¶º
  useEffect(() => {
    // Mock ModeÏóêÏÑúÎäî WebSocket Ïó∞Í≤∞ ÏôÑÏ†Ñ Ï∞®Îã®
    if (adaptersStore.mode === "mock") {
      console.log("üîÑ Mock Mode ‚Üí WebSocket Ïó∞Í≤∞ Ï∞®Îã®");
      setLogs([
        "üîÑ Mock Mode ÌôúÏÑ±Ìôî",
        "üöÄ FlashEtherea ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî ÏôÑÎ£å",
        "üì° MCP ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌôïÏù∏ Ï§ë...",
        "‚ö° AI Ïñ¥ÎåëÌÑ∞ ÏÉÅÌÉú ÌôïÏù∏ Ï§ë...",
        "üìä KPI Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë",
        "üõ°Ô∏è Do-No-Harm Ï†ïÏ±Ö ÌôúÏÑ±Ìôî"
      ]);
      
      // Mock Î°úÍ∑∏ Ï£ºÍ∏∞Ï†Å Ï∂îÍ∞Ä
      const mockInterval = setInterval(() => {
        const mockMessages = [
          "üìä KPI Î©îÌä∏Î¶≠ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å",
          "‚ö° AI Ïñ¥ÎåëÌÑ∞ ÏÉÅÌÉú Ï†ïÏÉÅ",
          "üõ°Ô∏è Î≥¥Ïïà Ï†ïÏ±Ö Í≤ÄÏ¶ù ÏôÑÎ£å",
          "üîß ÏãúÏä§ÌÖú Î¶¨ÏÜåÏä§ Î™®ÎãàÌÑ∞ÎßÅ Ï§ë",
          "üìà ÏÑ±Îä• ÏßÄÌëú ÏàòÏßë Ï§ë"
        ];
        const randomMessage = mockMessages[Math.floor(Math.random() * mockMessages.length)];
        const timestamp = new Date().toLocaleTimeString();
        setLogs(prev => [...prev, `[${timestamp}] ${randomMessage}`]);
      }, 5000);
      
      return () => clearInterval(mockInterval);
    }
    
    // Bolt.new WebContainer ÌôòÍ≤Ω Í∞êÏßÄ
    const isBoltContainer = window.location.hostname === 'localhost' || 
                           window.location.hostname.includes('bolt.new') ||
                           import.meta.env.DEV;
    
    if (isBoltContainer) {
      console.log("üîß Bolt.new ÌôòÍ≤Ω Í∞êÏßÄ ‚Üí WebSocket Ïó∞Í≤∞ Í±¥ÎÑàÎõ∞Í∏∞");
      adaptersStore.setConnectionStatus("disconnected");
      setLogs((prev) => [
        ...prev,
        "üîß Bolt.new Í∞úÎ∞ú ÌôòÍ≤Ω Í∞êÏßÄ",
        "‚ö†Ô∏è WebSocket Ïó∞Í≤∞ Í±¥ÎÑàÎõ∞Í∏∞ ‚Üí Mock Î°úÍ∑∏ ÏÇ¨Ïö©",
        "üöÄ FlashEtherea ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî ÏôÑÎ£å",
        "üì° MCP ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌôïÏù∏ Ï§ë...",
        "‚ö° AI Ïñ¥ÎåëÌÑ∞ ÏÉÅÌÉú ÌôïÏù∏ Ï§ë...",
        "üìä KPI Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë",
        "üõ°Ô∏è Do-No-Harm Ï†ïÏ±Ö ÌôúÏÑ±Ìôî"
      ]);
      
      // Mock Î°úÍ∑∏ ÏãúÎÆ¨Î†àÏù¥ÏÖò
      const mockInterval = setInterval(() => {
        const mockMessages = [
          "üìä KPI Î©îÌä∏Î¶≠ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å",
          "‚ö° AI Ïñ¥ÎåëÌÑ∞ ÏÉÅÌÉú Ï†ïÏÉÅ",
          "üõ°Ô∏è Î≥¥Ïïà Ï†ïÏ±Ö Í≤ÄÏ¶ù ÏôÑÎ£å",
          "üîß ÏãúÏä§ÌÖú Î¶¨ÏÜåÏä§ Î™®ÎãàÌÑ∞ÎßÅ Ï§ë",
          "üìà ÏÑ±Îä• ÏßÄÌëú ÏàòÏßë Ï§ë"
        ];
        const randomMessage = mockMessages[Math.floor(Math.random() * mockMessages.length)];
        const timestamp = new Date().toLocaleTimeString();
        setLogs(prev => [...prev, `[${timestamp}] ${randomMessage}`]);
      }, 5000);
      
      return () => clearInterval(mockInterval);
    }
    
    // Live ModeÏóêÏÑúÎßå Ïã§Ï†ú WebSocket Ïó∞Í≤∞ ÏãúÎèÑ
    console.log("‚ö° Live Mode ‚Üí WebSocket Ïó∞Í≤∞ ÏãúÎèÑ");
    const API_BASE = import.meta.env.VITE_API_BASE || "http://localhost:8000";
    const WS_URL = API_BASE.replace(/^http/, "ws") + "/ws/logs";
    
    // WebSocket Ïó∞Í≤∞ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
    adaptersStore.setConnectionStatus("connecting");
    let ws: WebSocket | null = null;
    let connectionTimeout: NodeJS.Timeout;
    
    try {
      // Ïó∞Í≤∞ ÌÉÄÏûÑÏïÑÏõÉ ÏÑ§Ï†ï (5Ï¥à)
      connectionTimeout = setTimeout(() => {
        if (ws && ws.readyState === WebSocket.CONNECTING) {
          console.warn("‚è∞ WebSocket Ïó∞Í≤∞ ÌÉÄÏûÑÏïÑÏõÉ");
          ws.close();
          adaptersStore.setConnectionStatus("error");
          setLogs((prev) => [
            ...prev,
            "‚è∞ WebSocket Ïó∞Í≤∞ ÌÉÄÏûÑÏïÑÏõÉ ‚Üí Mock Î°úÍ∑∏ ÏÇ¨Ïö©",
            "üöÄ FlashEtherea ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî ÏôÑÎ£å",
            "üì° MCP ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌôïÏù∏ Ï§ë...",
            "‚ö° AI Ïñ¥ÎåëÌÑ∞ ÏÉÅÌÉú ÌôïÏù∏ Ï§ë...",
            "üìä KPI Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë",
            "üõ°Ô∏è Do-No-Harm Ï†ïÏ±Ö ÌôúÏÑ±Ìôî"
          ]);
        }
      }, 5000);
      
      ws = new WebSocket(WS_URL);
      
      // Ïó∞Í≤∞ ÏÑ±Í≥µ Ìï∏Îì§Îü¨
      ws.onopen = () => {
        clearTimeout(connectionTimeout);
        console.log("‚úÖ WebSocket Ïó∞Í≤∞ ÏÑ±Í≥µ:", WS_URL);
        adaptersStore.setConnectionStatus("connected");
        setLogs((prev) => [...prev, "üîó WebSocket Î°úÍ∑∏ Ïó∞Í≤∞Îê®"]);
      };
      
      // Î©îÏãúÏßÄ ÏàòÏã† Ìï∏Îì§Îü¨ (Ïä§Ìä∏Î¶º Í≤ÄÏ¶ù Ï∂îÍ∞Ä)
      ws.onmessage = (event) => {
        try {
          // Ïä§Ìä∏Î¶º Îç∞Ïù¥ÌÑ∞ Í≤ÄÏ¶ù
          if (!event.data || event.data === undefined || event.data === null) {
            console.warn("‚ö†Ô∏è Empty WebSocket chunk dropped");
            return;
          }
          
          const message = String(event.data);
          if (message.trim()) {
            setLogs((prev) => [...prev, message]);
          }
        } catch (streamError) {
          console.error("‚ùå WebSocket Î©îÏãúÏßÄ Ï≤òÎ¶¨ Ïò§Î•ò:", streamError);
          setLogs((prev) => [...prev, `‚ùå Î©îÏãúÏßÄ Ï≤òÎ¶¨ Ïò§Î•ò: ${streamError.message}`]);
        }
      };
      
      // Ïó∞Í≤∞ Ïò§Î•ò Ìï∏Îì§Îü¨
      ws.onerror = (error) => {
        clearTimeout(connectionTimeout);
        console.warn("‚ö†Ô∏è WebSocket Ïó∞Í≤∞ Ïã§Ìå®:", error);
        console.warn("ÏãúÎèÑÌïú URL:", WS_URL);
        adaptersStore.setConnectionStatus("error");
        
        // Ïò§Î•ò Ïãú Mock Î°úÍ∑∏Î°ú ÎåÄÏ≤¥
        setLogs((prev) => [
          ...prev,
          "‚ö†Ô∏è WebSocket Ïó∞Í≤∞ Ïã§Ìå® ‚Üí Mock Î°úÍ∑∏ ÏÇ¨Ïö©",
          "üîß Bolt.new ÌôòÍ≤ΩÏóêÏÑúÎäî WebSocketÏù¥ Ï†úÌïúÎê† Ïàò ÏûàÏäµÎãàÎã§",
          "üöÄ FlashEtherea ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî ÏôÑÎ£å",
          "üì° MCP ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌôïÏù∏ Ï§ë...",
          "‚ö° AI Ïñ¥ÎåëÌÑ∞ ÏÉÅÌÉú ÌôïÏù∏ Ï§ë...",
          "üìä KPI Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë",
          "üõ°Ô∏è Do-No-Harm Ï†ïÏ±Ö ÌôúÏÑ±Ìôî"
        ]);
        
        // Mock Î°úÍ∑∏ ÏãúÎÆ¨Î†àÏù¥ÏÖò ÏãúÏûë
        const mockInterval = setInterval(() => {
          const mockMessages = [
            "üìä KPI Î©îÌä∏Î¶≠ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å",
            "‚ö° AI Ïñ¥ÎåëÌÑ∞ ÏÉÅÌÉú Ï†ïÏÉÅ",
            "üõ°Ô∏è Î≥¥Ïïà Ï†ïÏ±Ö Í≤ÄÏ¶ù ÏôÑÎ£å",
            "üîß ÏãúÏä§ÌÖú Î¶¨ÏÜåÏä§ Î™®ÎãàÌÑ∞ÎßÅ Ï§ë",
            "üìà ÏÑ±Îä• ÏßÄÌëú ÏàòÏßë Ï§ë"
          ];
          const randomMessage = mockMessages[Math.floor(Math.random() * mockMessages.length)];
          const timestamp = new Date().toLocaleTimeString();
          setLogs(prev => [...prev, `[${timestamp}] ${randomMessage}`]);
        }, 5000);
        
        // Ï†ïÎ¶¨ Ìï®ÏàòÏóê Ï∂îÍ∞Ä
        setTimeout(() => clearInterval(mockInterval), 30000); // 30Ï¥à ÌõÑ Ï†ïÎ¶¨
      };
      
      // Ïó∞Í≤∞ Ï¢ÖÎ£å Ìï∏Îì§Îü¨
      ws.onclose = () => {
        clearTimeout(connectionTimeout);
        console.log("üîå WebSocket Ïó∞Í≤∞ Ï¢ÖÎ£å");
        adaptersStore.setConnectionStatus("disconnected");
        setLogs((prev) => [...prev, "‚ùå WebSocket Ïó∞Í≤∞ Ï¢ÖÎ£å"]);
      };
      
    } catch (error) {
      clearTimeout(connectionTimeout);
      console.warn("‚ö†Ô∏è WebSocket Ï¥àÍ∏∞Ìôî Ïã§Ìå®:", error);
      adaptersStore.setConnectionStatus("error");
      
      setLogs((prev) => [
        ...prev,
        "‚ö†Ô∏è WebSocket Ï¥àÍ∏∞Ìôî Ïã§Ìå® ‚Üí Mock Î°úÍ∑∏ ÏÇ¨Ïö©",
        "üîß Bolt.new ÌôòÍ≤ΩÏóêÏÑúÎäî WebSocketÏù¥ Ï†úÌïúÎê† Ïàò ÏûàÏäµÎãàÎã§",
        "üöÄ FlashEtherea ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî ÏôÑÎ£å",
        "üì° MCP ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌôïÏù∏ Ï§ë...",
        "‚ö° AI Ïñ¥ÎåëÌÑ∞ ÏÉÅÌÉú ÌôïÏù∏ Ï§ë...",
        "üìä KPI Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë",
        "üõ°Ô∏è Do-No-Harm Ï†ïÏ±Ö ÌôúÏÑ±Ìôî"
      ]);
    }
    
    return () => {
      if (connectionTimeout) {
        clearTimeout(connectionTimeout);
      }
      if (ws) {
        console.log("üßπ WebSocket Ï†ïÎ¶¨ Ï§ë...");
        ws.onmessage = null; // Ìï∏Îì§Îü¨ Ï†ïÎ¶¨
        ws.onerror = null;
        ws.onclose = null;
        ws.close();
      }
    };
  }, [adaptersStore.mode]); // Î™®Îìú Î≥ÄÍ≤Ω Ïãú Ïû¨Ïó∞Í≤∞

  // ‚îÄ‚îÄ Ìï∏Îì§Îü¨
  const onStart = () => {
    setLogs((p) => [...p, "‚úÖ Start issued"]);
    setIsSystemRunning(true);
  };
  const onStop = () => {
    setLogs((p) => [...p, "üõë Stop issued"]);
    setIsSystemRunning(false);
  };
  const onRollback = () => setLogs((p) => [...p, "‚Ü©Ô∏è Rollback issued"]);

  const adapterBadges = useMemo(
    () => [
      { name: "ollama", status: server },
      { name: "deepseek", status: "warning" as Health },
      { name: "local_llm", status: "error" as Health },
    ],
    [server]
  );

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'healthy':
        return 'text-emerald-400';
      case 'warning':
        return 'text-amber-400';
      case 'error':
        return 'text-red-400';
      default:
        return 'text-gray-400';
    }
  };

  return (
    <div className="min-h-screen bg-[#0a0e1a] text-white">
      {/* ÏÇ¨Ïù¥ÎìúÎ∞î */}
      <div className="fixed left-0 top-0 h-full w-64 bg-[#0f1419] border-r border-gray-800 p-4">
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-2">
            <div className="w-8 h-8 bg-gradient-to-br from-cyan-400 to-blue-500 rounded-lg flex items-center justify-center">
              <Activity className="w-5 h-5 text-white" />
            </div>
            <h1 className="text-lg font-bold">FLASHETHEREA</h1>
          </div>
          <p className="text-xs text-gray-400">EXECUTION DASHBOARD</p>
        </div>

        <nav className="space-y-2">
          <div className="text-xs text-gray-500 uppercase tracking-wider mb-3">MAIN</div>
          <div className="flex items-center gap-3 px-3 py-2 rounded-lg bg-blue-600/20 text-blue-400 border border-blue-500/30">
            <BarChart3 className="w-4 h-4" />
            <span className="text-sm">Execution</span>
          </div>
          <a href="/design" className="flex items-center gap-3 px-3 py-2 rounded-lg text-gray-400 hover:bg-gray-800 hover:text-white transition-colors">
            <Layers className="w-4 h-4" />
            <span className="text-sm">Design</span>
          </a>
          <a href="/main" className="flex items-center gap-3 px-3 py-2 rounded-lg text-gray-400 hover:bg-gray-800 hover:text-white transition-colors">
            <PieChart className="w-4 h-4" />
            <span className="text-sm">Main</span>
          </a>
          <a href="/settings" className="flex items-center gap-3 px-3 py-2 rounded-lg text-gray-400 hover:bg-gray-800 hover:text-white transition-colors">
            <Settings className="w-4 h-4" />
            <span className="text-sm">Settings</span>
          </a>
          <a href="/ide" className="flex items-center gap-3 px-3 py-2 rounded-lg text-gray-400 hover:bg-gray-800 hover:text-white transition-colors">
            <Terminal className="w-4 h-4" />
            <span className="text-sm">IDE</span>
          </a>
          
          <div className="text-xs text-gray-500 uppercase tracking-wider mb-3 mt-6">MANAGEMENT</div>
          <a href="#" className="flex items-center gap-3 px-3 py-2 rounded-lg text-gray-400 hover:bg-gray-800 hover:text-white transition-colors">
            <Users className="w-4 h-4" />
            <span className="text-sm">Users</span>
          </a>
          <a href="#" className="flex items-center gap-3 px-3 py-2 rounded-lg text-gray-400 hover:bg-gray-800 hover:text-white transition-colors">
            <Database className="w-4 h-4" />
            <span className="text-sm">Database</span>
          </a>
          
          <div className="text-xs text-gray-500 uppercase tracking-wider mb-3 mt-6">SYSTEM</div>
          <a href="#" className="flex items-center gap-3 px-3 py-2 rounded-lg text-gray-400 hover:bg-gray-800 hover:text-white transition-colors">
            <Server className="w-4 h-4" />
            <span className="text-sm">Servers</span>
          </a>
        </nav>

        <div className="absolute bottom-4 left-4 right-4">
          <div className="bg-[#1a1f2e] rounded-lg p-3">
            <div className="flex items-center gap-2 mb-2">
              <div className={`w-2 h-2 rounded-full ${
                isSystemRunning ? 'bg-emerald-400 animate-pulse' : 'bg-red-400'
              }`}></div>
              <span className="text-xs text-gray-400">System Status</span>
            </div>
            <div className="text-sm font-medium">
              {isSystemRunning ? 'Active' : 'Stopped'}
            </div>
          </div>
        </div>
      </div>

      {/* Î©îÏù∏ ÏΩòÌÖêÏ∏† */}
      <div className="ml-64 p-6">
        {/* Ìó§Îçî */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h2 className="text-2xl font-bold text-white">Execution Dashboard</h2>
            <p className="text-gray-400">FlashEtherea Ïã§ÏãúÍ∞Ñ Ïã§Ìñâ Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏä§ÌÖú</p>
          </div>
          
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-2 text-sm text-gray-400">
              <Clock className="w-4 h-4" />
              <span>Last updated: 2 min ago</span>
            </div>
            
            {/* Î™®Îìú Ïä§ÏúÑÏπò */}
            <ModeSwitch />
            
            <button className="p-2 bg-[#1a1f2e] rounded-lg border border-gray-700 hover:bg-gray-800">
              <Settings className="w-4 h-4 text-gray-400" />
            </button>
          </div>
        </div>

        {/* Î©îÌä∏Î¶≠ Ïπ¥Îìú */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <motion.div
            className="bg-[#1a1f2e] rounded-xl p-6 border border-gray-800"
            whileHover={{ scale: 1.02 }}
          >
            <div className="flex items-center justify-between mb-4">
              <div className="w-12 h-12 bg-gradient-to-br from-emerald-400 to-emerald-600 rounded-lg flex items-center justify-center">
                <TrendingUp className="w-6 h-6 text-white" />
              </div>
              <div className="text-right">
                <div className="text-xs text-gray-400">ROI</div>
                <div className="text-2xl font-bold text-emerald-400">2.31x</div>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <TrendingUp className="w-4 h-4 text-emerald-400" />
              <span className="text-xs text-emerald-400">+12.5%</span>
              <span className="text-xs text-gray-500">vs last month</span>
            </div>
          </motion.div>

          <motion.div
            className="bg-[#1a1f2e] rounded-xl p-6 border border-gray-800"
            whileHover={{ scale: 1.02 }}
          >
            <div className="flex items-center justify-between mb-4">
              <div className="w-12 h-12 bg-gradient-to-br from-blue-400 to-blue-600 rounded-lg flex items-center justify-center">
                <Target className="w-6 h-6 text-white" />
              </div>
              <div className="text-right">
                <div className="text-xs text-gray-400">CTR</div>
                <div className="text-2xl font-bold text-blue-400">9.2%</div>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <TrendingUp className="w-4 h-4 text-blue-400" />
              <span className="text-xs text-blue-400">+3.2%</span>
              <span className="text-xs text-gray-500">vs last week</span>
            </div>
          </motion.div>

          <motion.div
            className="bg-[#1a1f2e] rounded-xl p-6 border border-gray-800"
            whileHover={{ scale: 1.02 }}
          >
            <div className="flex items-center justify-between mb-4">
              <div className="w-12 h-12 bg-gradient-to-br from-amber-400 to-amber-600 rounded-lg flex items-center justify-center">
                <Shield className="w-6 h-6 text-white" />
              </div>
              <div className="text-right">
                <div className="text-xs text-gray-400">Detection Rate</div>
                <div className="text-2xl font-bold text-amber-400">0.08%</div>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <TrendingDown className="w-4 h-4 text-emerald-400" />
              <span className="text-xs text-emerald-400">-0.02%</span>
              <span className="text-xs text-gray-500">vs yesterday</span>
            </div>
          </motion.div>

          <motion.div
            className="bg-[#1a1f2e] rounded-xl p-6 border border-gray-800"
            whileHover={{ scale: 1.02 }}
          >
            <div className="flex items-center justify-between mb-4">
              <div className="w-12 h-12 bg-gradient-to-br from-purple-400 to-purple-600 rounded-lg flex items-center justify-center">
                <Activity className="w-6 h-6 text-white" />
              </div>
              <div className="text-right">
                <div className="text-xs text-gray-400">Uptime</div>
                <div className="text-2xl font-bold text-purple-400">99.8%</div>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <CheckCircle className="w-4 h-4 text-emerald-400" />
              <span className="text-xs text-emerald-400">Stable</span>
              <span className="text-xs text-gray-500">2h 34m</span>
            </div>
          </motion.div>
        </div>

        {/* Ï∞®Ìä∏ Î∞è ÏãúÏä§ÌÖú ÏÉÅÌÉú */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
          {/* ÏãúÏä§ÌÖú Î¶¨ÏÜåÏä§ */}
          <div className="lg:col-span-2 bg-[#1a1f2e] rounded-xl p-6 border border-gray-800">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-lg font-semibold text-white">System Resources</h3>
              <div className="flex gap-2">
                <button className="px-3 py-1 text-xs bg-blue-600 text-white rounded-lg">1H</button>
                <button className="px-3 py-1 text-xs text-gray-400 hover:bg-gray-800 rounded-lg">6H</button>
                <button className="px-3 py-1 text-xs text-gray-400 hover:bg-gray-800 rounded-lg">1D</button>
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-6">
              <div>
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm text-gray-400">CPU Usage</span>
                  <span className="text-sm font-medium text-white">{systemStats.cpu}</span>
                </div>
                <div className="w-full bg-gray-800 rounded-full h-2">
                  <div className="bg-gradient-to-r from-blue-400 to-cyan-400 h-2 rounded-full" style={{width: '23%'}}></div>
                </div>
              </div>
              
              <div>
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm text-gray-400">Memory</span>
                  <span className="text-sm font-medium text-white">{systemStats.memory}</span>
                </div>
                <div className="w-full bg-gray-800 rounded-full h-2">
                  <div className="bg-gradient-to-r from-emerald-400 to-green-400 h-2 rounded-full" style={{width: '67%'}}></div>
                </div>
              </div>
              
              <div>
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm text-gray-400">Disk Usage</span>
                  <span className="text-sm font-medium text-white">{systemStats.disk}</span>
                </div>
                <div className="w-full bg-gray-800 rounded-full h-2">
                  <div className="bg-gradient-to-r from-amber-400 to-orange-400 h-2 rounded-full" style={{width: '45%'}}></div>
                </div>
              </div>
              
              <div>
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm text-gray-400">Network</span>
                  <span className="text-sm font-medium text-white">{systemStats.network}</span>
                </div>
                <div className="w-full bg-gray-800 rounded-full h-2">
                  <div className="bg-gradient-to-r from-purple-400 to-pink-400 h-2 rounded-full" style={{width: '80%'}}></div>
                </div>
              </div>
            </div>
          </div>

          {/* MCP Ïñ¥ÎåëÌÑ∞ ÏÉÅÌÉú */}
          <div className="bg-[#1a1f2e] rounded-xl p-6 border border-gray-800">
            <h3 className="text-lg font-semibold text-white mb-6">MCP Adapters</h3>
            <div className="space-y-4">
              {adapters.map((adapter, idx) => (
                <div key={idx} className="flex items-center justify-between p-3 bg-[#0f1419] rounded-lg border border-gray-800">
                  <div className="flex items-center gap-3">
                    <div className={`w-2 h-2 rounded-full ${
                      adapter.status === 'healthy' ? 'bg-emerald-400' :
                      adapter.status === 'warning' ? 'bg-amber-400' : 'bg-red-400'
                    }`}></div>
                    <div>
                      <div className="text-sm font-medium text-white">{adapter.name}</div>
                      <div className="text-xs text-gray-400">{adapter.latency}</div>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="text-xs text-gray-400">Requests</div>
                    <div className="text-sm font-medium text-white">{adapter.requests}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Ïª®Ìä∏Î°§ Î¶¨Î≥∏ */}
        <div className="mb-8">
          <CommandRibbon onStart={onStart} onStop={onStop} onRollback={onRollback} />
        </div>

        {/* Î°úÍ∑∏ Ìå®ÎÑê */}
        <div className="bg-[#1a1f2e] rounded-xl border border-gray-800">
          <div className="p-4">
            <div className="h-64 overflow-y-auto">
              <LogsPanel />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
});